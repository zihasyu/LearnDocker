// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cache.proto
#ifndef GRPC_cache_2eproto__INCLUDED
#define GRPC_cache_2eproto__INCLUDED

#include "cache.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

class SDCS final {
 public:
  static constexpr char const* service_full_name() {
    return "SDCS";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status RPCGet(::grpc::ClientContext* context, const ::Key& request, ::Value* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Value>> AsyncRPCGet(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Value>>(AsyncRPCGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Value>> PrepareAsyncRPCGet(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Value>>(PrepareAsyncRPCGetRaw(context, request, cq));
    }
    virtual ::grpc::Status RPCPost(::grpc::ClientContext* context, const ::Pair& request, ::Flag* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>> AsyncRPCPost(::grpc::ClientContext* context, const ::Pair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>>(AsyncRPCPostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>> PrepareAsyncRPCPost(::grpc::ClientContext* context, const ::Pair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>>(PrepareAsyncRPCPostRaw(context, request, cq));
    }
    virtual ::grpc::Status RPCDelete(::grpc::ClientContext* context, const ::Key& request, ::Flag* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>> AsyncRPCDelete(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>>(AsyncRPCDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>> PrepareAsyncRPCDelete(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>>(PrepareAsyncRPCDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status RPCAddNextServer(::grpc::ClientContext* context, const ::Flag& request, ::Flag* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>> AsyncRPCAddNextServer(::grpc::ClientContext* context, const ::Flag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>>(AsyncRPCAddNextServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>> PrepareAsyncRPCAddNextServer(::grpc::ClientContext* context, const ::Flag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::Flag>>(PrepareAsyncRPCAddNextServerRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a greeting
      virtual void RPCGet(::grpc::ClientContext* context, const ::Key* request, ::Value* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RPCPost(::grpc::ClientContext* context, const ::Pair* request, ::Flag* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RPCDelete(::grpc::ClientContext* context, const ::Key* request, ::Flag* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RPCAddNextServer(::grpc::ClientContext* context, const ::Flag* request, ::Flag* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Value>* AsyncRPCGetRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Value>* PrepareAsyncRPCGetRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Flag>* AsyncRPCPostRaw(::grpc::ClientContext* context, const ::Pair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Flag>* PrepareAsyncRPCPostRaw(::grpc::ClientContext* context, const ::Pair& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Flag>* AsyncRPCDeleteRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Flag>* PrepareAsyncRPCDeleteRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Flag>* AsyncRPCAddNextServerRaw(::grpc::ClientContext* context, const ::Flag& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::Flag>* PrepareAsyncRPCAddNextServerRaw(::grpc::ClientContext* context, const ::Flag& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RPCGet(::grpc::ClientContext* context, const ::Key& request, ::Value* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Value>> AsyncRPCGet(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Value>>(AsyncRPCGetRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Value>> PrepareAsyncRPCGet(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Value>>(PrepareAsyncRPCGetRaw(context, request, cq));
    }
    ::grpc::Status RPCPost(::grpc::ClientContext* context, const ::Pair& request, ::Flag* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>> AsyncRPCPost(::grpc::ClientContext* context, const ::Pair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>>(AsyncRPCPostRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>> PrepareAsyncRPCPost(::grpc::ClientContext* context, const ::Pair& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>>(PrepareAsyncRPCPostRaw(context, request, cq));
    }
    ::grpc::Status RPCDelete(::grpc::ClientContext* context, const ::Key& request, ::Flag* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>> AsyncRPCDelete(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>>(AsyncRPCDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>> PrepareAsyncRPCDelete(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>>(PrepareAsyncRPCDeleteRaw(context, request, cq));
    }
    ::grpc::Status RPCAddNextServer(::grpc::ClientContext* context, const ::Flag& request, ::Flag* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>> AsyncRPCAddNextServer(::grpc::ClientContext* context, const ::Flag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>>(AsyncRPCAddNextServerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>> PrepareAsyncRPCAddNextServer(::grpc::ClientContext* context, const ::Flag& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::Flag>>(PrepareAsyncRPCAddNextServerRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void RPCGet(::grpc::ClientContext* context, const ::Key* request, ::Value* response, std::function<void(::grpc::Status)>) override;
      void RPCPost(::grpc::ClientContext* context, const ::Pair* request, ::Flag* response, std::function<void(::grpc::Status)>) override;
      void RPCDelete(::grpc::ClientContext* context, const ::Key* request, ::Flag* response, std::function<void(::grpc::Status)>) override;
      void RPCAddNextServer(::grpc::ClientContext* context, const ::Flag* request, ::Flag* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::Value>* AsyncRPCGetRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Value>* PrepareAsyncRPCGetRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Flag>* AsyncRPCPostRaw(::grpc::ClientContext* context, const ::Pair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Flag>* PrepareAsyncRPCPostRaw(::grpc::ClientContext* context, const ::Pair& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Flag>* AsyncRPCDeleteRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Flag>* PrepareAsyncRPCDeleteRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Flag>* AsyncRPCAddNextServerRaw(::grpc::ClientContext* context, const ::Flag& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::Flag>* PrepareAsyncRPCAddNextServerRaw(::grpc::ClientContext* context, const ::Flag& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RPCGet_;
    const ::grpc::internal::RpcMethod rpcmethod_RPCPost_;
    const ::grpc::internal::RpcMethod rpcmethod_RPCDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_RPCAddNextServer_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status RPCGet(::grpc::ServerContext* context, const ::Key* request, ::Value* response);
    virtual ::grpc::Status RPCPost(::grpc::ServerContext* context, const ::Pair* request, ::Flag* response);
    virtual ::grpc::Status RPCDelete(::grpc::ServerContext* context, const ::Key* request, ::Flag* response);
    virtual ::grpc::Status RPCAddNextServer(::grpc::ServerContext* context, const ::Flag* request, ::Flag* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RPCGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RPCGet() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RPCGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCGet(::grpc::ServerContext* context, const ::Key* request, ::Value* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRPCGet(::grpc::ServerContext* context, ::Key* request, ::grpc::ServerAsyncResponseWriter< ::Value>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RPCPost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RPCPost() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RPCPost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCPost(::grpc::ServerContext* context, const ::Pair* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRPCPost(::grpc::ServerContext* context, ::Pair* request, ::grpc::ServerAsyncResponseWriter< ::Flag>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RPCDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RPCDelete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RPCDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCDelete(::grpc::ServerContext* context, const ::Key* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRPCDelete(::grpc::ServerContext* context, ::Key* request, ::grpc::ServerAsyncResponseWriter< ::Flag>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RPCAddNextServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RPCAddNextServer() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_RPCAddNextServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCAddNextServer(::grpc::ServerContext* context, const ::Flag* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRPCAddNextServer(::grpc::ServerContext* context, ::Flag* request, ::grpc::ServerAsyncResponseWriter< ::Flag>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RPCGet<WithAsyncMethod_RPCPost<WithAsyncMethod_RPCDelete<WithAsyncMethod_RPCAddNextServer<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_RPCGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RPCGet() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RPCGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCGet(::grpc::ServerContext* context, const ::Key* request, ::Value* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RPCPost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RPCPost() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RPCPost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCPost(::grpc::ServerContext* context, const ::Pair* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RPCDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RPCDelete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RPCDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCDelete(::grpc::ServerContext* context, const ::Key* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RPCAddNextServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RPCAddNextServer() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_RPCAddNextServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCAddNextServer(::grpc::ServerContext* context, const ::Flag* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_RPCGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RPCGet() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_RPCGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCGet(::grpc::ServerContext* context, const ::Key* request, ::Value* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRPCGet(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RPCPost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RPCPost() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RPCPost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCPost(::grpc::ServerContext* context, const ::Pair* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRPCPost(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RPCDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RPCDelete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RPCDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCDelete(::grpc::ServerContext* context, const ::Key* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRPCDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RPCAddNextServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_RPCAddNextServer() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_RPCAddNextServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RPCAddNextServer(::grpc::ServerContext* context, const ::Flag* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRPCAddNextServer(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RPCGet : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RPCGet() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::Key, ::Value>(std::bind(&WithStreamedUnaryMethod_RPCGet<BaseClass>::StreamedRPCGet, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RPCGet() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RPCGet(::grpc::ServerContext* context, const ::Key* request, ::Value* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRPCGet(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Key,::Value>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RPCPost : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RPCPost() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::Pair, ::Flag>(std::bind(&WithStreamedUnaryMethod_RPCPost<BaseClass>::StreamedRPCPost, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RPCPost() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RPCPost(::grpc::ServerContext* context, const ::Pair* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRPCPost(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Pair,::Flag>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RPCDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RPCDelete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::Key, ::Flag>(std::bind(&WithStreamedUnaryMethod_RPCDelete<BaseClass>::StreamedRPCDelete, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RPCDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RPCDelete(::grpc::ServerContext* context, const ::Key* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRPCDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Key,::Flag>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RPCAddNextServer : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RPCAddNextServer() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::Flag, ::Flag>(std::bind(&WithStreamedUnaryMethod_RPCAddNextServer<BaseClass>::StreamedRPCAddNextServer, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RPCAddNextServer() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RPCAddNextServer(::grpc::ServerContext* context, const ::Flag* request, ::Flag* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRPCAddNextServer(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::Flag,::Flag>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RPCGet<WithStreamedUnaryMethod_RPCPost<WithStreamedUnaryMethod_RPCDelete<WithStreamedUnaryMethod_RPCAddNextServer<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RPCGet<WithStreamedUnaryMethod_RPCPost<WithStreamedUnaryMethod_RPCDelete<WithStreamedUnaryMethod_RPCAddNextServer<Service > > > > StreamedService;
};


#endif  // GRPC_cache_2eproto__INCLUDED
