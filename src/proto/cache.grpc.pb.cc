// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: cache.proto

#include "cache.pb.h"
#include "cache.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* SDCS_method_names[] = {
  "/SDCS/RPCGet",
  "/SDCS/RPCPost",
  "/SDCS/RPCDelete",
  "/SDCS/RPCAddNextServer",
};

std::unique_ptr< SDCS::Stub> SDCS::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SDCS::Stub> stub(new SDCS::Stub(channel));
  return stub;
}

SDCS::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RPCGet_(SDCS_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RPCPost_(SDCS_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RPCDelete_(SDCS_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RPCAddNextServer_(SDCS_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SDCS::Stub::RPCGet(::grpc::ClientContext* context, const ::Key& request, ::Value* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RPCGet_, context, request, response);
}

void SDCS::Stub::experimental_async::RPCGet(::grpc::ClientContext* context, const ::Key* request, ::Value* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RPCGet_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Value>* SDCS::Stub::AsyncRPCGetRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Value>::Create(channel_.get(), cq, rpcmethod_RPCGet_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Value>* SDCS::Stub::PrepareAsyncRPCGetRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Value>::Create(channel_.get(), cq, rpcmethod_RPCGet_, context, request, false);
}

::grpc::Status SDCS::Stub::RPCPost(::grpc::ClientContext* context, const ::Pair& request, ::Flag* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RPCPost_, context, request, response);
}

void SDCS::Stub::experimental_async::RPCPost(::grpc::ClientContext* context, const ::Pair* request, ::Flag* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RPCPost_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Flag>* SDCS::Stub::AsyncRPCPostRaw(::grpc::ClientContext* context, const ::Pair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Flag>::Create(channel_.get(), cq, rpcmethod_RPCPost_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Flag>* SDCS::Stub::PrepareAsyncRPCPostRaw(::grpc::ClientContext* context, const ::Pair& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Flag>::Create(channel_.get(), cq, rpcmethod_RPCPost_, context, request, false);
}

::grpc::Status SDCS::Stub::RPCDelete(::grpc::ClientContext* context, const ::Key& request, ::Flag* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RPCDelete_, context, request, response);
}

void SDCS::Stub::experimental_async::RPCDelete(::grpc::ClientContext* context, const ::Key* request, ::Flag* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RPCDelete_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Flag>* SDCS::Stub::AsyncRPCDeleteRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Flag>::Create(channel_.get(), cq, rpcmethod_RPCDelete_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Flag>* SDCS::Stub::PrepareAsyncRPCDeleteRaw(::grpc::ClientContext* context, const ::Key& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Flag>::Create(channel_.get(), cq, rpcmethod_RPCDelete_, context, request, false);
}

::grpc::Status SDCS::Stub::RPCAddNextServer(::grpc::ClientContext* context, const ::Flag& request, ::Flag* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RPCAddNextServer_, context, request, response);
}

void SDCS::Stub::experimental_async::RPCAddNextServer(::grpc::ClientContext* context, const ::Flag* request, ::Flag* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RPCAddNextServer_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::Flag>* SDCS::Stub::AsyncRPCAddNextServerRaw(::grpc::ClientContext* context, const ::Flag& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Flag>::Create(channel_.get(), cq, rpcmethod_RPCAddNextServer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::Flag>* SDCS::Stub::PrepareAsyncRPCAddNextServerRaw(::grpc::ClientContext* context, const ::Flag& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::Flag>::Create(channel_.get(), cq, rpcmethod_RPCAddNextServer_, context, request, false);
}

SDCS::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDCS_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDCS::Service, ::Key, ::Value>(
          std::mem_fn(&SDCS::Service::RPCGet), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDCS_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDCS::Service, ::Pair, ::Flag>(
          std::mem_fn(&SDCS::Service::RPCPost), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDCS_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDCS::Service, ::Key, ::Flag>(
          std::mem_fn(&SDCS::Service::RPCDelete), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SDCS_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SDCS::Service, ::Flag, ::Flag>(
          std::mem_fn(&SDCS::Service::RPCAddNextServer), this)));
}

SDCS::Service::~Service() {
}

::grpc::Status SDCS::Service::RPCGet(::grpc::ServerContext* context, const ::Key* request, ::Value* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDCS::Service::RPCPost(::grpc::ServerContext* context, const ::Pair* request, ::Flag* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDCS::Service::RPCDelete(::grpc::ServerContext* context, const ::Key* request, ::Flag* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SDCS::Service::RPCAddNextServer(::grpc::ServerContext* context, const ::Flag* request, ::Flag* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


